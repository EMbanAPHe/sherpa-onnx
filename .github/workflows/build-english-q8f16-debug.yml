name: Build English-only Kokoro Q8F16 (Debug)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_DIR: android/SherpaOnnxTtsEngine
      ASSETS_DIR: android/SherpaOnnxTtsEngine/app/src/main/assets/model
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Provision the CLI; install packages ourselves (more reliable).
      - name: Set up Android SDK (tool only)
        uses: android-actions/setup-android@v3

      - name: Install SDK Platform, Build-tools, NDK, CMake (and accept licenses)
        shell: bash
        run: |
          set -euxo pipefail
          yes | sdkmanager --licenses >/dev/null 2>&1 || true
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;26.3.11579264" \
            "cmake;3.22.1"
          echo "NDK installed at: $ANDROID_SDK_ROOT/ndk"
          ls -al "$ANDROID_SDK_ROOT/ndk" || true

      - name: Extract EN-only assets from official APK (voices/tokens/lexicons)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ASSETS_DIR"
          curl -fL --retry 3 --retry-delay 5 \
            -H "Accept: application/octet-stream" \
            -o en.apk \
            "https://huggingface.co/csukuangfj/sherpa-onnx-apk/resolve/main/tts-engine-new/1.12.14/sherpa-onnx-1.12.14-arm64-v8a-en-tts-engine-kokoro-en-v0_19.apk"

          # 1) Unzip whole APK to a temp dir (quietly), then 2) pick out the files we need.
          TMP_ASSETS="$(mktemp -d)"
          unzip -q en.apk -d "$TMP_ASSETS"

          echo "Listing asset files found in APK:"
          ( unzip -Z1 en.apk | sed -n '/^assets\//p' | head -200 ) || true

          # Copy required assets no matter which subfolder they are in
          find "$TMP_ASSETS" -path '*/assets/*' -name 'tokens.txt' -print -exec cp -v {} "$ASSETS_DIR/tokens.txt" \; || true
          find "$TMP_ASSETS" -path '*/assets/*' -name 'voices.bin' -print -exec cp -v {} "$ASSETS_DIR/voices.bin" \; || true

          # Copy English lexicons if present; ignore others
          find "$TMP_ASSETS" -path '*/assets/*' -name 'lexicon-us-en.txt' -print -exec cp -v {} "$ASSETS_DIR/lexicon-us-en.txt" \; || true
          find "$TMP_ASSETS" -path '*/assets/*' -name 'lexicon-gb-en.txt' -print -exec cp -v {} "$ASSETS_DIR/lexicon-gb-en.txt" \; || true

          echo "Assets after copy:"
          ls -lah "$ASSETS_DIR"

          # Normalize names and enforce presence
          cd "$ASSETS_DIR"
          [ -f tokens.txt ] || { echo "ERROR: tokens.txt not found"; exit 2; }
          [ -f voices.bin ] || { echo "ERROR: voices.bin not found"; exit 3; }

          # Defensive prune: keep English lexicons only if others ever appear
          find . -maxdepth 1 -type f -name 'lexicon-*.txt' \
            ! -name 'lexicon-us-en.txt' \
            ! -name 'lexicon-gb-en.txt' -delete
          cd -

      - name: Swap ONNX to Kokoro v1.0 Q8F16 (best quality @ speed)
        shell: bash
        run: |
          set -euo pipefail
          cd "$ASSETS_DIR"
          rm -f model.onnx || true
          curl -fL --retry 3 --retry-delay 5 \
            -H "Accept: application/octet-stream" \
            -o model.onnx \
            "https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/onnx/model_q8f16.onnx"
          echo "Final files in assets/model:"; ls -lah .
          test -f model.onnx && test -f tokens.txt && test -f voices.bin

      - name: Make Gradle wrapper executable
        run: chmod +x $APP_DIR/gradlew

      - name: Assemble Debug (arm64-v8a)
        working-directory: ${{ env.APP_DIR }}
        env:
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/26.3.11579264
        run: ./gradlew --no-daemon --stacktrace --warning-mode all assembleDebug

      - name: Show packaged assets in debug APK
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ env.APP_DIR }}/app/build/outputs/apk/debug/app-debug.apk"
          unzip -Z1 "$APK" | sed -n '/^assets\/model\//p' || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: sherpa-onnx-tts-engine-english-q8f16-debug
          path: android/SherpaOnnxTtsEngine/app/build/outputs/apk/debug/app-debug.apk
