name: Build Kokoro EN-only (FP32 & Q8)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        profile: [fp32, q8]

    env:
      APP_DIR: android/SherpaOnnxTtsEngine
      ASSETS_DIR: android/SherpaOnnxTtsEngine/app/src/main/assets/model
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK (install packages & accept licenses)
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          # Install everything we need up-front
          packages: |
            platform-tools
            platforms;android-34
            build-tools;34.0.0
            ndk;26.3.11579264
            cmake;3.22.1

      - name: Show Android tool versions (debug)
        shell: bash
        run: |
          set -euo pipefail
          sdkmanager --version || true
          ${ANDROID_SDK_ROOT}/ndk/26.3.11579264/ndk-build --version || true
          cmake --version || true

      - name: Prepare English assets
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ASSETS_DIR"
          echo "Downloading donor APK with English assets..."
          curl -fL --retry 3 --retry-delay 5 \
            -H "Accept: application/octet-stream" \
            -o en.apk \
            "https://huggingface.co/csukuangfj/sherpa-onnx-apk/resolve/main/tts-engine-new/1.12.14/sherpa-onnx-1.12.14-arm64-v8a-en-tts-engine-kokoro-en-v0_19.apk"

          TMP_ASSETS="$(mktemp -d)"
          unzip -q en.apk -d "$TMP_ASSETS"

          # Copy the assets we need into our project
          find "$TMP_ASSETS" -iname 'tokens.txt' -exec cp -v {} "$ASSETS_DIR/tokens.txt" \; || true
          find "$TMP_ASSETS" -iname 'voices.bin' -exec cp -v {} "$ASSETS_DIR/voices.bin" \; || true
          find "$TMP_ASSETS" -iname 'lexicon-us-en.txt' -exec cp -v {} "$ASSETS_DIR/lexicon-us-en.txt" \; || true
          find "$TMP_ASSETS" -iname 'lexicon-gb-en.txt' -exec cp -v {} "$ASSETS_DIR/lexicon-gb-en.txt" \; || true

          test -f "$ASSETS_DIR/tokens.txt"
          test -f "$ASSETS_DIR/voices.bin"

      - name: Swap ONNX model (per matrix profile)
        shell: bash
        run: |
          set -euo pipefail
          cd "$ASSETS_DIR"
          rm -f model.onnx || true
          if [ "${{ matrix.profile }}" = "fp32" ]; then
            MODEL_URL="https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/onnx/model.onnx"
          else
            MODEL_URL="https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/onnx/model_quantized.onnx"
          fi
          echo "Downloading model: $MODEL_URL"
          curl -fL --retry 3 --retry-delay 5 \
            -H "Accept: application/octet-stream" \
            -o model.onnx "$MODEL_URL"
          test -f model.onnx

      - name: Make Gradle wrapper executable
        shell: bash
        run: chmod +x "${APP_DIR}/gradlew"

      - name: Assemble Debug
        working-directory: ${{ env.APP_DIR }}
        env:
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/26.3.11579264
        run: |
          set -euo pipefail
          ./gradlew --no-daemon --stacktrace --warning-mode all assembleDebug

      - name: Show packaged assets in debug APK
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ env.APP_DIR }}/app/build/outputs/apk/debug/app-debug.apk"
          unzip -Z1 "$APK" | sed -n '/^assets\/model\//p' || true

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kokoro-en-${{ matrix.profile }}-debug
          path: android/SherpaOnnxTtsEngine/app/build/outputs/apk/debug/app-debug.apk
